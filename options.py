import argparse
import torch
parser = argparse.ArgumentParser(description='mention normalization for BC5CDR corpus')
parser.add_argument('-emb_filename', default=None)
parser.add_argument('-train_file', default='sample_data/train_debug.txt')
parser.add_argument('-dev_file', default='sample_data/dev_debug.txt')
parser.add_argument('-test_file', default='sample_data/test_debug.txt')
parser.add_argument('-dict_file', default='sample_data/dict_debug.txt')
parser.add_argument('-abbre_file', default='sample_data/abbre_debug.txt')
parser.add_argument('-random_seed', type=int, default=1)
parser.add_argument('-learning_rate', type=float, default=0.0001)
parser.add_argument('-dropout', type=float, default=0.3)
parser.add_argument('-word_emb_size', type=int, default=200)
parser.add_argument('-hidden_size', type=int, default=100)
parser.add_argument('-pad_idx', default=1, type=int)
parser.add_argument('-batch_size', type=int, default=16)
parser.add_argument('-max_epoch', type=int, default=30)
parser.add_argument('-evaluate_every', type=int, default=1)
parser.add_argument('-use_cuda', default=True)
parser.add_argument('-gpu', type=int, default=1, help='gpu id, set to -1 if use cpu mode')
parser.add_argument('-dict_iteration', type=int, default=50)
parser.add_argument('-pretraining', default=True, help='if dict pre-training')
parser.add_argument('-fine_tune', default=True, help='word embedding tune')
parser.add_argument('-random_emb', default=True, help='random initialize word embedding')
parser.add_argument('-use_word2digit', default=False)
parser.add_argument('-nlp_tool', default='nltk', help='spacy, nltk, stanford')
parser.add_argument('-max-norm', type=float, default=3.0, help='l2 constraint of parameters [default: 3.0]')
parser.add_argument('-kernel-num', type=int, default=100, help='number of each kind of kernel')
parser.add_argument('-kernel-sizes', type=str, default='2,3,4', help='comma-separated kernel size to use for convolution')
parser.add_argument('-sent_hidden_size', type=int, default=50)
parser.add_argument('-sent_lstm',  default=False)
opt = parser.parse_args()
opt.use_cuda = opt.use_cuda and torch.cuda.is_available()
